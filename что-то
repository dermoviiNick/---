/*    - СТЕК -    */ 
// funcs.cpp
#include "funcs.h"

int main() {
	setlocale(LC_ALL, "Rus"); // Русский язык
	srand(time(NULL));        // Чтобы рандом был каждый раз "рандомным" 

	Stack* s_top{ NULL };  // вершина основного стека 
	Stack* ds_top{ NULL }; // вершина доп стека

	menu(s_top, ds_top); // вызов меню программы

	return 0;
}
// funcs.h
#include <ctime> 
#include <stdlib.h> 
struct Stack {
	int element;
	Stack* next_element;
};
/*   -МЕНЮ-   */
void menu(Stack*& s_top, Stack*& ds_top); 
int textMenu(); // Просто текст меню
/*   -Вывод стека-   */
void s_print(Stack* s_top, Stack* ds_top, bool z = 0, int number = 0); // Вывод стека на экран (также используется при добавлении элементов)
/*   -Добавление элементов-   */
void s_add(Stack*& s_top, Stack*& ds_top);
void s_pass(Stack*& s_top, Stack*& ds_top, int number);
int s_push(Stack*& ds_top);
/*   -Удаление элемента-   */
void s_delete(Stack*& s_top, Stack*& ds_top);
void s_delete_element(Stack*& ds_top, int number);
/*   -Доп функции-   */
int checkInteger(int a, int b); // Проверка на ввод числа из указанного диапозона
int check_number(Stack* top); // Возвращается кол-во значений в введённом стеке

// SOURCE.CPP 
#include "funcs.h"

int main() {
	setlocale(LC_ALL, "Rus"); // Русский язык
	srand(time(NULL));        // Чтобы рандом был каждый раз "рандомным" 

	Stack* s_top{ NULL };  // вершина основного стека 
	Stack* ds_top{ NULL }; // вершина доп стека

	menu(s_top, ds_top); // вызов меню программы

	return 0;
}



/*   - очередь -   */
#include <iostream>

const int size{ 5 };
int ring_queue[size];
int front{ -1 };
int rear{ -1 };


bool empty() {
    return front == -1 && rear == -1;
}

bool full() {
    return (front == 0 && rear == size - 1) || (rear == (front - 1) % (size - 1));
}

bool push() {
    if (full()) {
        std::cout << "Очередь полна" << std::endl;
        return false;
    }
    std::cout << "Введите значение: ";
    int new_data;
    std::cin >> new_data;
    if (rear == size - 1) {
        rear = 0;
        ring_queue[rear] = new_data;
    }
    else {
        if (empty()) {
            front = 0;
        }
        rear++;
        ring_queue[rear] = new_data;
    }
    return true;
}

bool pop() {
    if (empty()) {
        std::cout << "Очередь пуста." << std::endl;
        return false;
    }
    else if (front == rear) { // всего 1 элемент
        front = -1;
        rear = -1;
    }
    else if (front == size - 1) {
        front = 0;
    }
    else {
        front++;
    }
    return true;
}

void show() {
    if (empty()) {
        std::cout << "Очередь пуста." << std::endl;
        return;
    }
    std::cout << "Очередь: " << "[" << front << "; " << rear << "]" << std::endl;
    std::cout << std::endl;
    if (rear >= front) {
        for (int i{ front }; i <= rear; i++) {
            std::cout << ring_queue[i] << " ";
        }
        /*
        std::cout << std::endl;
        for (int i{}; i < size; i++) {
            if (front <= i && i <= rear) {
                std::cout << ring_queue[i] << " ";
            }
            else {
                std::cout << '*' << " ";
            }
        }
        */
    }
    else {
        for (int i{ front }; i < size; i++) {
            std::cout << ring_queue[i] << " ";
        }
        for (int i{ 0 }; i <= rear; i++) {
            std::cout << ring_queue[i] << " ";
        }
        /*
        std::cout << std::endl;
        for (int i{ 0 }; i < size; i++) {
            if (i <= rear) {
                std::cout << ring_queue[i] << " ";
            }
            else
            {
                if (front <= i) {
                    std::cout << ring_queue[i] << " ";
                }
                else {
                    std::cout << '*' << " ";
                }
            }
        }
        */
    }
    std::cout << std::endl;
}

bool choise_function() {
    std::cout << "Функции: 1-Выход, 2-Показать, 3-Добавить, 4-Удалить\nВыбор: ";
    int n;
    std::cin >> n;
    switch (n) {
    case 1:
        return false;
    case 2:
        show();
        return true;
    case 3:
        push();
        return true;
    case 4:
        pop();
        return true;
    default:
        return true;
    }
}

void interface() {
    while (choise_function()) {
        std::cout << "---------------------------------" << std::endl;
    }
}

int main() {
    setlocale(LC_ALL, "Ru");
    interface();
    return 1;
}




/*   - список односвязный с рандомным заполнением -   */
#include <iostream>
#include <iostream>
#include <stdlib.h>
#include <time.h>

int GetRandomNumber(int min, int max) {
    int num = min + rand() % (max - min + 1);
    return num;
}

struct Node {
    char data;
    Node* next;
};

struct RingQueue {
    Node* front{ nullptr };
    Node* rear{ nullptr };
};


bool empty(RingQueue& a_ring_queue) {
    return (a_ring_queue.front == nullptr && a_ring_queue.rear == nullptr);
}

void push(RingQueue& a_ring_queue, int new_data) {
    if (empty(a_ring_queue)) {
        a_ring_queue.front = new Node();
        a_ring_queue.front->data = new_data;
        a_ring_queue.front->next = a_ring_queue.front;
        a_ring_queue.rear = a_ring_queue.front;
    }
    else {
        a_ring_queue.rear->next = new Node();
        a_ring_queue.rear->next->data = new_data;
        a_ring_queue.rear->next->next = a_ring_queue.front;
        a_ring_queue.rear = a_ring_queue.rear->next;
    }
}

bool pop(RingQueue& a_ring_queue) {
    if (empty(a_ring_queue)) {
        return false;
    }
    else {
        if (a_ring_queue.front == a_ring_queue.rear) {
            delete a_ring_queue.front;
            a_ring_queue.front = nullptr;
            a_ring_queue.rear = nullptr;
        }
        else {
            Node* second_node_of_queue = a_ring_queue.front->next;
            delete a_ring_queue.front;
            a_ring_queue.front = second_node_of_queue;
            a_ring_queue.rear->next = a_ring_queue.front;
        }
    }
    return true;
}

void show(RingQueue& a_ring_queue) {
    if (empty(a_ring_queue)) {
        std::cout << "Очередь пуста." << std::endl;
        return;
    }
    else {
        Node* next = a_ring_queue.front;
        while (next != a_ring_queue.rear) {
            std::cout << next->data;
            next = next->next;
        }
        std::cout << a_ring_queue.rear->data;
    }
    std::cout << std::endl;
}

bool function(RingQueue& q, int& number_of_iterations) {
    int push_or_pop{ GetRandomNumber(1, 100) };
    int num_of_nodes{ GetRandomNumber(1, 3) };
    std::cout << number_of_iterations << ": ";
    if (push_or_pop % 2 == 0) {
        std::cout << "Выполняется " << "добавление " << num_of_nodes << " раз(а)." << std::endl;
        for (int i{}; i < num_of_nodes; i++) {
            push(q, GetRandomNumber(65, 90));
        }
    }
    else {
        std::cout << "Выполняется " << "удаление " << num_of_nodes << " раз(а)." << std::endl;
        for (int i{}; i < num_of_nodes; i++) {
            pop(q);
        }
    }
    std::cout << "Состояние очереди: ";
    show(q);

    std::cout << "Стоп? - ";
    char stop_or_continue{};
    std::cin >> stop_or_continue;
    number_of_iterations++;
    if (stop_or_continue == 'q') {
        return false;
    }
    else {
        return true;
    }
}

void interface(RingQueue& q) {
    int number_of_iterations{ 1 };
    while (function(q, number_of_iterations)) {
        std::cout << "---------------------------------" << std::endl;
    }
}

int main() {
    RingQueue q;
    setlocale(LC_ALL, "Ru");
    srand(static_cast <unsigned int>(time(NULL)));
    interface(q);
    return 1;
}
